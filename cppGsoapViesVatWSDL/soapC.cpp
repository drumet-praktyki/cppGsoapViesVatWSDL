/* soapC.cpp
   Generated by gSOAP 2.8.69 for checkVatService.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.69 2018-08-09 12:05:42 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns2__matchCode:
		return soap_in_ns2__matchCode(soap, NULL, NULL, "ns2:matchCode");
	case SOAP_TYPE_ns2__companyTypeCode:
		return soap_in_ns2__companyTypeCode(soap, NULL, NULL, "ns2:companyTypeCode");
	case SOAP_TYPE_xsd__date:
		return soap_in_xsd__date(soap, NULL, NULL, "xsd:date");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns2__checkVatApprox:
		return soap_in_PointerTo_ns2__checkVatApprox(soap, NULL, NULL, "ns2:checkVatApprox");
	case SOAP_TYPE_PointerTo_ns2__checkVat:
		return soap_in_PointerTo_ns2__checkVat(soap, NULL, NULL, "ns2:checkVat");
	case SOAP_TYPE_PointerTons2__matchCode:
		return soap_in_PointerTons2__matchCode(soap, NULL, NULL, "ns2:matchCode");
	case SOAP_TYPE_PointerTons2__companyTypeCode:
		return soap_in_PointerTons2__companyTypeCode(soap, NULL, NULL, "ns2:companyTypeCode");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns2:companyTypeCode"))
		{	*type = SOAP_TYPE_ns2__companyTypeCode;
			return soap_in_ns2__companyTypeCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:date"))
		{	*type = SOAP_TYPE_xsd__date;
			return soap_in_xsd__date(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:matchCode"))
		{	*type = SOAP_TYPE_ns2__matchCode;
			return soap_in_ns2__matchCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns2:checkVatApproxResponse"))
		{	*type = SOAP_TYPE__ns2__checkVatApproxResponse;
			return soap_in__ns2__checkVatApproxResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:checkVatApprox"))
		{	*type = SOAP_TYPE__ns2__checkVatApprox;
			return soap_in__ns2__checkVatApprox(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:checkVatResponse"))
		{	*type = SOAP_TYPE__ns2__checkVatResponse;
			return soap_in__ns2__checkVatResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:checkVat"))
		{	*type = SOAP_TYPE__ns2__checkVat;
			return soap_in__ns2__checkVat(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns2__matchCode:
		return soap_out_ns2__matchCode(soap, tag, id, (const enum ns2__matchCode *)ptr, "ns2:matchCode");
	case SOAP_TYPE_ns2__companyTypeCode:
		return soap_out_ns2__companyTypeCode(soap, tag, id, (const std::string *)ptr, "ns2:companyTypeCode");
	case SOAP_TYPE__ns2__checkVatApproxResponse:
		return ((_ns2__checkVatApproxResponse *)ptr)->soap_out(soap, "ns2:checkVatApproxResponse", id, "");
	case SOAP_TYPE__ns2__checkVatApprox:
		return ((_ns2__checkVatApprox *)ptr)->soap_out(soap, "ns2:checkVatApprox", id, "");
	case SOAP_TYPE__ns2__checkVatResponse:
		return ((_ns2__checkVatResponse *)ptr)->soap_out(soap, "ns2:checkVatResponse", id, "");
	case SOAP_TYPE__ns2__checkVat:
		return ((_ns2__checkVat *)ptr)->soap_out(soap, "ns2:checkVat", id, "");
	case SOAP_TYPE_xsd__date:
		return soap_out_xsd__date(soap, tag, id, (const std::string *)ptr, "xsd:date");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PointerTo_ns2__checkVatApprox:
		return soap_out_PointerTo_ns2__checkVatApprox(soap, tag, id, (_ns2__checkVatApprox *const*)ptr, "ns2:checkVatApprox");
	case SOAP_TYPE_PointerTo_ns2__checkVat:
		return soap_out_PointerTo_ns2__checkVat(soap, tag, id, (_ns2__checkVat *const*)ptr, "ns2:checkVat");
	case SOAP_TYPE_PointerTons2__matchCode:
		return soap_out_PointerTons2__matchCode(soap, tag, id, (enum ns2__matchCode *const*)ptr, "ns2:matchCode");
	case SOAP_TYPE_PointerTons2__companyTypeCode:
		return soap_out_PointerTons2__companyTypeCode(soap, tag, id, (std::string *const*)ptr, "ns2:companyTypeCode");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns2__companyTypeCode:
		soap_serialize_ns2__companyTypeCode(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns2__checkVatApproxResponse:
		((_ns2__checkVatApproxResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__checkVatApprox:
		((_ns2__checkVatApprox *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__checkVatResponse:
		((_ns2__checkVatResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__checkVat:
		((_ns2__checkVat *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__date:
		soap_serialize_xsd__date(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE___ns1__checkVatApprox:
		soap_serialize___ns1__checkVatApprox(soap, (const struct __ns1__checkVatApprox *)ptr);
		break;
	case SOAP_TYPE___ns1__checkVat:
		soap_serialize___ns1__checkVat(soap, (const struct __ns1__checkVat *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__checkVatApprox:
		soap_serialize_PointerTo_ns2__checkVatApprox(soap, (_ns2__checkVatApprox *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__checkVat:
		soap_serialize_PointerTo_ns2__checkVat(soap, (_ns2__checkVat *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__matchCode:
		soap_serialize_PointerTons2__matchCode(soap, (enum ns2__matchCode *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__companyTypeCode:
		soap_serialize_PointerTons2__companyTypeCode(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__checkVat:
		return (void*)soap_instantiate__ns2__checkVat(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__checkVatResponse:
		return (void*)soap_instantiate__ns2__checkVatResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__checkVatApprox:
		return (void*)soap_instantiate__ns2__checkVatApprox(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__checkVatApproxResponse:
		return (void*)soap_instantiate__ns2__checkVatApproxResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__checkVat:
		return (void*)soap_instantiate___ns1__checkVat(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__checkVatApprox:
		return (void*)soap_instantiate___ns1__checkVatApprox(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__date:
		return (void*)soap_instantiate_xsd__date(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__companyTypeCode:
		return (void*)soap_instantiate_ns2__companyTypeCode(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE__ns2__checkVat:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns2__checkVat*>(p->ptr), _ns2__checkVat);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns2__checkVat*>(p->ptr), _ns2__checkVat);
		break;
	case SOAP_TYPE__ns2__checkVatResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns2__checkVatResponse*>(p->ptr), _ns2__checkVatResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns2__checkVatResponse*>(p->ptr), _ns2__checkVatResponse);
		break;
	case SOAP_TYPE__ns2__checkVatApprox:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns2__checkVatApprox*>(p->ptr), _ns2__checkVatApprox);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns2__checkVatApprox*>(p->ptr), _ns2__checkVatApprox);
		break;
	case SOAP_TYPE__ns2__checkVatApproxResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns2__checkVatApproxResponse*>(p->ptr), _ns2__checkVatApproxResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns2__checkVatApproxResponse*>(p->ptr), _ns2__checkVatApproxResponse);
		break;
	case SOAP_TYPE___ns1__checkVat:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__checkVat*>(p->ptr), struct __ns1__checkVat);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__checkVat*>(p->ptr), struct __ns1__checkVat);
		break;
	case SOAP_TYPE___ns1__checkVatApprox:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__checkVatApprox*>(p->ptr), struct __ns1__checkVatApprox);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__checkVatApprox*>(p->ptr), struct __ns1__checkVatApprox);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_xsd__date:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_ns2__companyTypeCode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE__ns2__checkVat:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns2__checkVat type=%d location=%p object=%p\n", t, p, q));
		*(_ns2__checkVat*)p = *(_ns2__checkVat*)q;
		break;
	case SOAP_TYPE__ns2__checkVatResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns2__checkVatResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns2__checkVatResponse*)p = *(_ns2__checkVatResponse*)q;
		break;
	case SOAP_TYPE__ns2__checkVatApprox:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns2__checkVatApprox type=%d location=%p object=%p\n", t, p, q));
		*(_ns2__checkVatApprox*)p = *(_ns2__checkVatApprox*)q;
		break;
	case SOAP_TYPE__ns2__checkVatApproxResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns2__checkVatApproxResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns2__checkVatApproxResponse*)p = *(_ns2__checkVatApproxResponse*)q;
		break;
	case SOAP_TYPE___ns1__checkVat:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__checkVat type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__checkVat*)p = *(struct __ns1__checkVat*)q;
		break;
	case SOAP_TYPE___ns1__checkVatApprox:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__checkVatApprox type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__checkVatApprox*)p = *(struct __ns1__checkVatApprox*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_xsd__date:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns2__companyTypeCode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_ns2__matchCode[] =
{	{ (LONG64)ns2__matchCode__1, "1" },
	{ (LONG64)ns2__matchCode__2, "2" },
	{ (LONG64)ns2__matchCode__3, "3" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__matchCode2s(struct soap *soap, enum ns2__matchCode n)
{	const char *s = soap_code_str(soap_codes_ns2__matchCode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__matchCode(struct soap *soap, const char *tag, int id, const enum ns2__matchCode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__matchCode), type) || soap_send(soap, soap_ns2__matchCode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__matchCode(struct soap *soap, const char *s, enum ns2__matchCode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns2__matchCode, s);
	if (map)
		*a = (enum ns2__matchCode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (enum ns2__matchCode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns2__matchCode * SOAP_FMAC4 soap_in_ns2__matchCode(struct soap *soap, const char *tag, enum ns2__matchCode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns2__matchCode *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__matchCode, sizeof(enum ns2__matchCode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2ns2__matchCode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum ns2__matchCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__matchCode, SOAP_TYPE_ns2__matchCode, sizeof(enum ns2__matchCode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum ns2__matchCode * SOAP_FMAC4 soap_new_ns2__matchCode(struct soap *soap, int n)
{
	enum ns2__matchCode *a = static_cast<enum ns2__matchCode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum ns2__matchCode)));
	for (enum ns2__matchCode *p = a; p && n--; ++p)
		soap_default_ns2__matchCode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__matchCode(struct soap *soap, const enum ns2__matchCode *a, const char *tag, const char *type)
{
	if (soap_out_ns2__matchCode(soap, tag ? tag : "ns2:matchCode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__matchCode * SOAP_FMAC4 soap_get_ns2__matchCode(struct soap *soap, enum ns2__matchCode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__matchCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__companyTypeCode(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__companyTypeCode(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns2__companyTypeCode), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__companyTypeCode(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__companyTypeCode, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, "[A-Z]{2}\\-[1-9][0-9]?")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__companyTypeCode, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_ns2__companyTypeCode, SOAP_TYPE_ns2__companyTypeCode, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__companyTypeCode(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_ns2__companyTypeCode(soap, tag ? tag : "ns2:companyTypeCode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__companyTypeCode(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__companyTypeCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns2__checkVatApproxResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns2__checkVatApproxResponse::countryCode);
	soap_default_std__string(soap, &this->_ns2__checkVatApproxResponse::vatNumber);
	soap_default_xsd__date(soap, &this->_ns2__checkVatApproxResponse::requestDate);
	soap_default_bool(soap, &this->_ns2__checkVatApproxResponse::valid);
	this->_ns2__checkVatApproxResponse::traderName = NULL;
	this->_ns2__checkVatApproxResponse::traderCompanyType = NULL;
	this->_ns2__checkVatApproxResponse::traderAddress = NULL;
	this->_ns2__checkVatApproxResponse::traderStreet = NULL;
	this->_ns2__checkVatApproxResponse::traderPostcode = NULL;
	this->_ns2__checkVatApproxResponse::traderCity = NULL;
	this->_ns2__checkVatApproxResponse::traderNameMatch = NULL;
	this->_ns2__checkVatApproxResponse::traderCompanyTypeMatch = NULL;
	this->_ns2__checkVatApproxResponse::traderStreetMatch = NULL;
	this->_ns2__checkVatApproxResponse::traderPostcodeMatch = NULL;
	this->_ns2__checkVatApproxResponse::traderCityMatch = NULL;
	soap_default_std__string(soap, &this->_ns2__checkVatApproxResponse::requestIdentifier);
	/* transient soap skipped */
}

void _ns2__checkVatApproxResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns2__checkVatApproxResponse::countryCode, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns2__checkVatApproxResponse::countryCode);
	soap_embedded(soap, &this->_ns2__checkVatApproxResponse::vatNumber, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns2__checkVatApproxResponse::vatNumber);
	soap_serialize_xsd__date(soap, &this->_ns2__checkVatApproxResponse::requestDate);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__checkVatApproxResponse::traderName);
	soap_serialize_PointerTons2__companyTypeCode(soap, &this->_ns2__checkVatApproxResponse::traderCompanyType);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__checkVatApproxResponse::traderAddress);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__checkVatApproxResponse::traderStreet);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__checkVatApproxResponse::traderPostcode);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__checkVatApproxResponse::traderCity);
	soap_serialize_PointerTons2__matchCode(soap, &this->_ns2__checkVatApproxResponse::traderNameMatch);
	soap_serialize_PointerTons2__matchCode(soap, &this->_ns2__checkVatApproxResponse::traderCompanyTypeMatch);
	soap_serialize_PointerTons2__matchCode(soap, &this->_ns2__checkVatApproxResponse::traderStreetMatch);
	soap_serialize_PointerTons2__matchCode(soap, &this->_ns2__checkVatApproxResponse::traderPostcodeMatch);
	soap_serialize_PointerTons2__matchCode(soap, &this->_ns2__checkVatApproxResponse::traderCityMatch);
	soap_embedded(soap, &this->_ns2__checkVatApproxResponse::requestIdentifier, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns2__checkVatApproxResponse::requestIdentifier);
#endif
}

int _ns2__checkVatApproxResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__checkVatApproxResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__checkVatApproxResponse(struct soap *soap, const char *tag, int id, const _ns2__checkVatApproxResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__checkVatApproxResponse), type))
		return soap->error;
	soap_element_result(soap, "ns2:countryCode");
	if (soap_out_std__string(soap, "ns2:countryCode", -1, &a->_ns2__checkVatApproxResponse::countryCode, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns2:vatNumber", -1, &a->_ns2__checkVatApproxResponse::vatNumber, ""))
		return soap->error;
	if (soap_out_xsd__date(soap, "ns2:requestDate", -1, &a->_ns2__checkVatApproxResponse::requestDate, ""))
		return soap->error;
	if (soap_out_bool(soap, "ns2:valid", -1, &a->_ns2__checkVatApproxResponse::valid, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:traderName", -1, &a->_ns2__checkVatApproxResponse::traderName, ""))
		return soap->error;
	if (soap_out_PointerTons2__companyTypeCode(soap, "ns2:traderCompanyType", -1, &a->_ns2__checkVatApproxResponse::traderCompanyType, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:traderAddress", -1, &a->_ns2__checkVatApproxResponse::traderAddress, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:traderStreet", -1, &a->_ns2__checkVatApproxResponse::traderStreet, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:traderPostcode", -1, &a->_ns2__checkVatApproxResponse::traderPostcode, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:traderCity", -1, &a->_ns2__checkVatApproxResponse::traderCity, ""))
		return soap->error;
	if (soap_out_PointerTons2__matchCode(soap, "ns2:traderNameMatch", -1, &a->_ns2__checkVatApproxResponse::traderNameMatch, ""))
		return soap->error;
	if (soap_out_PointerTons2__matchCode(soap, "ns2:traderCompanyTypeMatch", -1, &a->_ns2__checkVatApproxResponse::traderCompanyTypeMatch, ""))
		return soap->error;
	if (soap_out_PointerTons2__matchCode(soap, "ns2:traderStreetMatch", -1, &a->_ns2__checkVatApproxResponse::traderStreetMatch, ""))
		return soap->error;
	if (soap_out_PointerTons2__matchCode(soap, "ns2:traderPostcodeMatch", -1, &a->_ns2__checkVatApproxResponse::traderPostcodeMatch, ""))
		return soap->error;
	if (soap_out_PointerTons2__matchCode(soap, "ns2:traderCityMatch", -1, &a->_ns2__checkVatApproxResponse::traderCityMatch, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns2:requestIdentifier", -1, &a->_ns2__checkVatApproxResponse::requestIdentifier, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns2__checkVatApproxResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__checkVatApproxResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__checkVatApproxResponse * SOAP_FMAC4 soap_in__ns2__checkVatApproxResponse(struct soap *soap, const char *tag, _ns2__checkVatApproxResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__checkVatApproxResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__checkVatApproxResponse, sizeof(_ns2__checkVatApproxResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns2__checkVatApproxResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns2__checkVatApproxResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_countryCode1 = 1;
	size_t soap_flag_vatNumber1 = 1;
	size_t soap_flag_requestDate1 = 1;
	size_t soap_flag_valid1 = 1;
	size_t soap_flag_traderName1 = 1;
	size_t soap_flag_traderCompanyType1 = 1;
	size_t soap_flag_traderAddress1 = 1;
	size_t soap_flag_traderStreet1 = 1;
	size_t soap_flag_traderPostcode1 = 1;
	size_t soap_flag_traderCity1 = 1;
	size_t soap_flag_traderNameMatch1 = 1;
	size_t soap_flag_traderCompanyTypeMatch1 = 1;
	size_t soap_flag_traderStreetMatch1 = 1;
	size_t soap_flag_traderPostcodeMatch1 = 1;
	size_t soap_flag_traderCityMatch1 = 1;
	size_t soap_flag_requestIdentifier1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_countryCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns2:countryCode", &a->_ns2__checkVatApproxResponse::countryCode, "xsd:string"))
				{	soap_flag_countryCode1--;
					continue;
				}
			}
			if (soap_flag_vatNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns2:vatNumber", &a->_ns2__checkVatApproxResponse::vatNumber, "xsd:string"))
				{	soap_flag_vatNumber1--;
					continue;
				}
			}
			if (soap_flag_requestDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_xsd__date(soap, "ns2:requestDate", &a->_ns2__checkVatApproxResponse::requestDate, "xsd:date"))
				{	soap_flag_requestDate1--;
					continue;
				}
			}
			if (soap_flag_valid1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns2:valid", &a->_ns2__checkVatApproxResponse::valid, "xsd:boolean"))
				{	soap_flag_valid1--;
					continue;
				}
			}
			if (soap_flag_traderName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:traderName", &a->_ns2__checkVatApproxResponse::traderName, "xsd:string"))
				{	soap_flag_traderName1--;
					continue;
				}
			}
			if (soap_flag_traderCompanyType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTons2__companyTypeCode(soap, "ns2:traderCompanyType", &a->_ns2__checkVatApproxResponse::traderCompanyType, "ns2:companyTypeCode"))
				{	soap_flag_traderCompanyType1--;
					continue;
				}
			}
			if (soap_flag_traderAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:traderAddress", &a->_ns2__checkVatApproxResponse::traderAddress, "xsd:string"))
				{	soap_flag_traderAddress1--;
					continue;
				}
			}
			if (soap_flag_traderStreet1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:traderStreet", &a->_ns2__checkVatApproxResponse::traderStreet, "xsd:string"))
				{	soap_flag_traderStreet1--;
					continue;
				}
			}
			if (soap_flag_traderPostcode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:traderPostcode", &a->_ns2__checkVatApproxResponse::traderPostcode, "xsd:string"))
				{	soap_flag_traderPostcode1--;
					continue;
				}
			}
			if (soap_flag_traderCity1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:traderCity", &a->_ns2__checkVatApproxResponse::traderCity, "xsd:string"))
				{	soap_flag_traderCity1--;
					continue;
				}
			}
			if (soap_flag_traderNameMatch1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons2__matchCode(soap, "ns2:traderNameMatch", &a->_ns2__checkVatApproxResponse::traderNameMatch, "ns2:matchCode"))
				{	soap_flag_traderNameMatch1--;
					continue;
				}
			}
			if (soap_flag_traderCompanyTypeMatch1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons2__matchCode(soap, "ns2:traderCompanyTypeMatch", &a->_ns2__checkVatApproxResponse::traderCompanyTypeMatch, "ns2:matchCode"))
				{	soap_flag_traderCompanyTypeMatch1--;
					continue;
				}
			}
			if (soap_flag_traderStreetMatch1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons2__matchCode(soap, "ns2:traderStreetMatch", &a->_ns2__checkVatApproxResponse::traderStreetMatch, "ns2:matchCode"))
				{	soap_flag_traderStreetMatch1--;
					continue;
				}
			}
			if (soap_flag_traderPostcodeMatch1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons2__matchCode(soap, "ns2:traderPostcodeMatch", &a->_ns2__checkVatApproxResponse::traderPostcodeMatch, "ns2:matchCode"))
				{	soap_flag_traderPostcodeMatch1--;
					continue;
				}
			}
			if (soap_flag_traderCityMatch1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons2__matchCode(soap, "ns2:traderCityMatch", &a->_ns2__checkVatApproxResponse::traderCityMatch, "ns2:matchCode"))
				{	soap_flag_traderCityMatch1--;
					continue;
				}
			}
			if (soap_flag_requestIdentifier1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns2:requestIdentifier", &a->_ns2__checkVatApproxResponse::requestIdentifier, "xsd:string"))
				{	soap_flag_requestIdentifier1--;
					continue;
				}
			}
			soap_check_result(soap, "ns2:countryCode");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_countryCode1 > 0 || soap_flag_vatNumber1 > 0 || soap_flag_requestDate1 > 0 || soap_flag_valid1 > 0 || soap_flag_requestIdentifier1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns2__checkVatApproxResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__checkVatApproxResponse, SOAP_TYPE__ns2__checkVatApproxResponse, sizeof(_ns2__checkVatApproxResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns2__checkVatApproxResponse * SOAP_FMAC2 soap_instantiate__ns2__checkVatApproxResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__checkVatApproxResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns2__checkVatApproxResponse *p;
	size_t k = sizeof(_ns2__checkVatApproxResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns2__checkVatApproxResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns2__checkVatApproxResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns2__checkVatApproxResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns2__checkVatApproxResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns2__checkVatApproxResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns2__checkVatApproxResponse(soap, tag ? tag : "ns2:checkVatApproxResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__checkVatApproxResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__checkVatApproxResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__checkVatApproxResponse * SOAP_FMAC4 soap_get__ns2__checkVatApproxResponse(struct soap *soap, _ns2__checkVatApproxResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__checkVatApproxResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns2__checkVatApprox::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns2__checkVatApprox::countryCode);
	soap_default_std__string(soap, &this->_ns2__checkVatApprox::vatNumber);
	this->_ns2__checkVatApprox::traderName = NULL;
	this->_ns2__checkVatApprox::traderCompanyType = NULL;
	this->_ns2__checkVatApprox::traderStreet = NULL;
	this->_ns2__checkVatApprox::traderPostcode = NULL;
	this->_ns2__checkVatApprox::traderCity = NULL;
	this->_ns2__checkVatApprox::requesterCountryCode = NULL;
	this->_ns2__checkVatApprox::requesterVatNumber = NULL;
	/* transient soap skipped */
}

void _ns2__checkVatApprox::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns2__checkVatApprox::countryCode, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns2__checkVatApprox::countryCode);
	soap_embedded(soap, &this->_ns2__checkVatApprox::vatNumber, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns2__checkVatApprox::vatNumber);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__checkVatApprox::traderName);
	soap_serialize_PointerTons2__companyTypeCode(soap, &this->_ns2__checkVatApprox::traderCompanyType);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__checkVatApprox::traderStreet);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__checkVatApprox::traderPostcode);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__checkVatApprox::traderCity);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__checkVatApprox::requesterCountryCode);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__checkVatApprox::requesterVatNumber);
#endif
}

int _ns2__checkVatApprox::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__checkVatApprox(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__checkVatApprox(struct soap *soap, const char *tag, int id, const _ns2__checkVatApprox *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__checkVatApprox), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns2:countryCode", -1, &a->_ns2__checkVatApprox::countryCode, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns2:vatNumber", -1, &a->_ns2__checkVatApprox::vatNumber, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:traderName", -1, &a->_ns2__checkVatApprox::traderName, ""))
		return soap->error;
	if (soap_out_PointerTons2__companyTypeCode(soap, "ns2:traderCompanyType", -1, &a->_ns2__checkVatApprox::traderCompanyType, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:traderStreet", -1, &a->_ns2__checkVatApprox::traderStreet, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:traderPostcode", -1, &a->_ns2__checkVatApprox::traderPostcode, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:traderCity", -1, &a->_ns2__checkVatApprox::traderCity, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:requesterCountryCode", -1, &a->_ns2__checkVatApprox::requesterCountryCode, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:requesterVatNumber", -1, &a->_ns2__checkVatApprox::requesterVatNumber, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns2__checkVatApprox::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__checkVatApprox(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__checkVatApprox * SOAP_FMAC4 soap_in__ns2__checkVatApprox(struct soap *soap, const char *tag, _ns2__checkVatApprox *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__checkVatApprox *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__checkVatApprox, sizeof(_ns2__checkVatApprox), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns2__checkVatApprox)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns2__checkVatApprox *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_countryCode1 = 1;
	size_t soap_flag_vatNumber1 = 1;
	size_t soap_flag_traderName1 = 1;
	size_t soap_flag_traderCompanyType1 = 1;
	size_t soap_flag_traderStreet1 = 1;
	size_t soap_flag_traderPostcode1 = 1;
	size_t soap_flag_traderCity1 = 1;
	size_t soap_flag_requesterCountryCode1 = 1;
	size_t soap_flag_requesterVatNumber1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_countryCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns2:countryCode", &a->_ns2__checkVatApprox::countryCode, "xsd:string"))
				{	soap_flag_countryCode1--;
					continue;
				}
			}
			if (soap_flag_vatNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns2:vatNumber", &a->_ns2__checkVatApprox::vatNumber, "xsd:string"))
				{	soap_flag_vatNumber1--;
					continue;
				}
			}
			if (soap_flag_traderName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:traderName", &a->_ns2__checkVatApprox::traderName, "xsd:string"))
				{	soap_flag_traderName1--;
					continue;
				}
			}
			if (soap_flag_traderCompanyType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTons2__companyTypeCode(soap, "ns2:traderCompanyType", &a->_ns2__checkVatApprox::traderCompanyType, "ns2:companyTypeCode"))
				{	soap_flag_traderCompanyType1--;
					continue;
				}
			}
			if (soap_flag_traderStreet1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:traderStreet", &a->_ns2__checkVatApprox::traderStreet, "xsd:string"))
				{	soap_flag_traderStreet1--;
					continue;
				}
			}
			if (soap_flag_traderPostcode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:traderPostcode", &a->_ns2__checkVatApprox::traderPostcode, "xsd:string"))
				{	soap_flag_traderPostcode1--;
					continue;
				}
			}
			if (soap_flag_traderCity1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:traderCity", &a->_ns2__checkVatApprox::traderCity, "xsd:string"))
				{	soap_flag_traderCity1--;
					continue;
				}
			}
			if (soap_flag_requesterCountryCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:requesterCountryCode", &a->_ns2__checkVatApprox::requesterCountryCode, "xsd:string"))
				{	soap_flag_requesterCountryCode1--;
					continue;
				}
			}
			if (soap_flag_requesterVatNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:requesterVatNumber", &a->_ns2__checkVatApprox::requesterVatNumber, "xsd:string"))
				{	soap_flag_requesterVatNumber1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_countryCode1 > 0 || soap_flag_vatNumber1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns2__checkVatApprox *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__checkVatApprox, SOAP_TYPE__ns2__checkVatApprox, sizeof(_ns2__checkVatApprox), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns2__checkVatApprox * SOAP_FMAC2 soap_instantiate__ns2__checkVatApprox(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__checkVatApprox(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns2__checkVatApprox *p;
	size_t k = sizeof(_ns2__checkVatApprox);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns2__checkVatApprox, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns2__checkVatApprox);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns2__checkVatApprox, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns2__checkVatApprox location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns2__checkVatApprox::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns2__checkVatApprox(soap, tag ? tag : "ns2:checkVatApprox", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__checkVatApprox::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__checkVatApprox(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__checkVatApprox * SOAP_FMAC4 soap_get__ns2__checkVatApprox(struct soap *soap, _ns2__checkVatApprox *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__checkVatApprox(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns2__checkVatResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns2__checkVatResponse::countryCode);
	soap_default_std__string(soap, &this->_ns2__checkVatResponse::vatNumber);
	soap_default_xsd__date(soap, &this->_ns2__checkVatResponse::requestDate);
	soap_default_bool(soap, &this->_ns2__checkVatResponse::valid);
	this->_ns2__checkVatResponse::name = NULL;
	this->_ns2__checkVatResponse::address = NULL;
	/* transient soap skipped */
}

void _ns2__checkVatResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns2__checkVatResponse::countryCode, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns2__checkVatResponse::countryCode);
	soap_embedded(soap, &this->_ns2__checkVatResponse::vatNumber, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns2__checkVatResponse::vatNumber);
	soap_serialize_xsd__date(soap, &this->_ns2__checkVatResponse::requestDate);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__checkVatResponse::name);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__checkVatResponse::address);
#endif
}

int _ns2__checkVatResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__checkVatResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__checkVatResponse(struct soap *soap, const char *tag, int id, const _ns2__checkVatResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__checkVatResponse), type))
		return soap->error;
	soap_element_result(soap, "ns2:countryCode");
	if (soap_out_std__string(soap, "ns2:countryCode", -1, &a->_ns2__checkVatResponse::countryCode, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns2:vatNumber", -1, &a->_ns2__checkVatResponse::vatNumber, ""))
		return soap->error;
	if (soap_out_xsd__date(soap, "ns2:requestDate", -1, &a->_ns2__checkVatResponse::requestDate, ""))
		return soap->error;
	if (soap_out_bool(soap, "ns2:valid", -1, &a->_ns2__checkVatResponse::valid, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:name", -1, &a->_ns2__checkVatResponse::name, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:address", -1, &a->_ns2__checkVatResponse::address, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns2__checkVatResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__checkVatResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__checkVatResponse * SOAP_FMAC4 soap_in__ns2__checkVatResponse(struct soap *soap, const char *tag, _ns2__checkVatResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__checkVatResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__checkVatResponse, sizeof(_ns2__checkVatResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns2__checkVatResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns2__checkVatResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_countryCode1 = 1;
	size_t soap_flag_vatNumber1 = 1;
	size_t soap_flag_requestDate1 = 1;
	size_t soap_flag_valid1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_address1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_countryCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns2:countryCode", &a->_ns2__checkVatResponse::countryCode, "xsd:string"))
				{	soap_flag_countryCode1--;
					continue;
				}
			}
			if (soap_flag_vatNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns2:vatNumber", &a->_ns2__checkVatResponse::vatNumber, "xsd:string"))
				{	soap_flag_vatNumber1--;
					continue;
				}
			}
			if (soap_flag_requestDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_xsd__date(soap, "ns2:requestDate", &a->_ns2__checkVatResponse::requestDate, "xsd:date"))
				{	soap_flag_requestDate1--;
					continue;
				}
			}
			if (soap_flag_valid1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns2:valid", &a->_ns2__checkVatResponse::valid, "xsd:boolean"))
				{	soap_flag_valid1--;
					continue;
				}
			}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:name", &a->_ns2__checkVatResponse::name, "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_address1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:address", &a->_ns2__checkVatResponse::address, "xsd:string"))
				{	soap_flag_address1--;
					continue;
				}
			}
			soap_check_result(soap, "ns2:countryCode");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_countryCode1 > 0 || soap_flag_vatNumber1 > 0 || soap_flag_requestDate1 > 0 || soap_flag_valid1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns2__checkVatResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__checkVatResponse, SOAP_TYPE__ns2__checkVatResponse, sizeof(_ns2__checkVatResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns2__checkVatResponse * SOAP_FMAC2 soap_instantiate__ns2__checkVatResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__checkVatResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns2__checkVatResponse *p;
	size_t k = sizeof(_ns2__checkVatResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns2__checkVatResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns2__checkVatResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns2__checkVatResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns2__checkVatResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns2__checkVatResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns2__checkVatResponse(soap, tag ? tag : "ns2:checkVatResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__checkVatResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__checkVatResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__checkVatResponse * SOAP_FMAC4 soap_get__ns2__checkVatResponse(struct soap *soap, _ns2__checkVatResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__checkVatResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns2__checkVat::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns2__checkVat::countryCode);
	soap_default_std__string(soap, &this->_ns2__checkVat::vatNumber);
	/* transient soap skipped */
}

void _ns2__checkVat::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns2__checkVat::countryCode, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns2__checkVat::countryCode);
	soap_embedded(soap, &this->_ns2__checkVat::vatNumber, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns2__checkVat::vatNumber);
#endif
}

int _ns2__checkVat::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__checkVat(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__checkVat(struct soap *soap, const char *tag, int id, const _ns2__checkVat *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__checkVat), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns2:countryCode", -1, &a->_ns2__checkVat::countryCode, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns2:vatNumber", -1, &a->_ns2__checkVat::vatNumber, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns2__checkVat::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__checkVat(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__checkVat * SOAP_FMAC4 soap_in__ns2__checkVat(struct soap *soap, const char *tag, _ns2__checkVat *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__checkVat *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__checkVat, sizeof(_ns2__checkVat), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns2__checkVat)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns2__checkVat *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_countryCode1 = 1;
	size_t soap_flag_vatNumber1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_countryCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns2:countryCode", &a->_ns2__checkVat::countryCode, "xsd:string"))
				{	soap_flag_countryCode1--;
					continue;
				}
			}
			if (soap_flag_vatNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns2:vatNumber", &a->_ns2__checkVat::vatNumber, "xsd:string"))
				{	soap_flag_vatNumber1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_countryCode1 > 0 || soap_flag_vatNumber1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns2__checkVat *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__checkVat, SOAP_TYPE__ns2__checkVat, sizeof(_ns2__checkVat), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns2__checkVat * SOAP_FMAC2 soap_instantiate__ns2__checkVat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__checkVat(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns2__checkVat *p;
	size_t k = sizeof(_ns2__checkVat);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns2__checkVat, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns2__checkVat);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns2__checkVat, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns2__checkVat location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns2__checkVat::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns2__checkVat(soap, tag ? tag : "ns2:checkVat", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__checkVat::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__checkVat(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__checkVat * SOAP_FMAC4 soap_get__ns2__checkVat(struct soap *soap, _ns2__checkVat *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__checkVat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__date(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__date), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__date(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__date, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[-+]?\\d{4,}-\\d{2}-\\d{2}(Z|[-+]\\d{2}:\\d{2})?")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__date, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__date, SOAP_TYPE_xsd__date, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__date(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__date(soap, tag ? tag : "xsd:date", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__date(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__date(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkVatApprox(struct soap *soap, struct __ns1__checkVatApprox *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__checkVatApprox = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkVatApprox(struct soap *soap, const struct __ns1__checkVatApprox *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns2__checkVatApprox(soap, &a->ns2__checkVatApprox);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkVatApprox(struct soap *soap, const char *tag, int id, const struct __ns1__checkVatApprox *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns2__checkVatApprox(soap, "ns2:checkVatApprox", -1, &a->ns2__checkVatApprox, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__checkVatApprox * SOAP_FMAC4 soap_in___ns1__checkVatApprox(struct soap *soap, const char *tag, struct __ns1__checkVatApprox *a, const char *type)
{
	size_t soap_flag_ns2__checkVatApprox = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__checkVatApprox *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__checkVatApprox, sizeof(struct __ns1__checkVatApprox), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__checkVatApprox(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__checkVatApprox && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns2__checkVatApprox(soap, "ns2:checkVatApprox", &a->ns2__checkVatApprox, ""))
				{	soap_flag_ns2__checkVatApprox--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__checkVatApprox * SOAP_FMAC2 soap_instantiate___ns1__checkVatApprox(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__checkVatApprox(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__checkVatApprox *p;
	size_t k = sizeof(struct __ns1__checkVatApprox);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__checkVatApprox, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__checkVatApprox);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__checkVatApprox, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__checkVatApprox location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkVatApprox(struct soap *soap, const struct __ns1__checkVatApprox *a, const char *tag, const char *type)
{
	if (soap_out___ns1__checkVatApprox(soap, tag ? tag : "-ns1:checkVatApprox", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__checkVatApprox * SOAP_FMAC4 soap_get___ns1__checkVatApprox(struct soap *soap, struct __ns1__checkVatApprox *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__checkVatApprox(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkVat(struct soap *soap, struct __ns1__checkVat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__checkVat = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkVat(struct soap *soap, const struct __ns1__checkVat *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns2__checkVat(soap, &a->ns2__checkVat);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkVat(struct soap *soap, const char *tag, int id, const struct __ns1__checkVat *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns2__checkVat(soap, "ns2:checkVat", -1, &a->ns2__checkVat, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__checkVat * SOAP_FMAC4 soap_in___ns1__checkVat(struct soap *soap, const char *tag, struct __ns1__checkVat *a, const char *type)
{
	size_t soap_flag_ns2__checkVat = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__checkVat *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__checkVat, sizeof(struct __ns1__checkVat), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__checkVat(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__checkVat && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns2__checkVat(soap, "ns2:checkVat", &a->ns2__checkVat, ""))
				{	soap_flag_ns2__checkVat--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__checkVat * SOAP_FMAC2 soap_instantiate___ns1__checkVat(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__checkVat(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__checkVat *p;
	size_t k = sizeof(struct __ns1__checkVat);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__checkVat, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__checkVat);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__checkVat, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__checkVat location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkVat(struct soap *soap, const struct __ns1__checkVat *a, const char *tag, const char *type)
{
	if (soap_out___ns1__checkVat(soap, tag ? tag : "-ns1:checkVat", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__checkVat * SOAP_FMAC4 soap_get___ns1__checkVat(struct soap *soap, struct __ns1__checkVat *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__checkVat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__checkVatApprox(struct soap *soap, _ns2__checkVatApprox *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__checkVatApprox))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__checkVatApprox(struct soap *soap, const char *tag, int id, _ns2__checkVatApprox *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__checkVatApprox, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns2__checkVatApprox ? type : NULL);
}

SOAP_FMAC3 _ns2__checkVatApprox ** SOAP_FMAC4 soap_in_PointerTo_ns2__checkVatApprox(struct soap *soap, const char *tag, _ns2__checkVatApprox **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__checkVatApprox **)soap_malloc(soap, sizeof(_ns2__checkVatApprox *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__checkVatApprox *)soap_instantiate__ns2__checkVatApprox(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns2__checkVatApprox **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__checkVatApprox, sizeof(_ns2__checkVatApprox), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__checkVatApprox(struct soap *soap, _ns2__checkVatApprox *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns2__checkVatApprox(soap, tag ? tag : "ns2:checkVatApprox", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__checkVatApprox ** SOAP_FMAC4 soap_get_PointerTo_ns2__checkVatApprox(struct soap *soap, _ns2__checkVatApprox **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__checkVatApprox(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__checkVat(struct soap *soap, _ns2__checkVat *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__checkVat))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__checkVat(struct soap *soap, const char *tag, int id, _ns2__checkVat *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__checkVat, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns2__checkVat ? type : NULL);
}

SOAP_FMAC3 _ns2__checkVat ** SOAP_FMAC4 soap_in_PointerTo_ns2__checkVat(struct soap *soap, const char *tag, _ns2__checkVat **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__checkVat **)soap_malloc(soap, sizeof(_ns2__checkVat *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__checkVat *)soap_instantiate__ns2__checkVat(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns2__checkVat **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__checkVat, sizeof(_ns2__checkVat), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__checkVat(struct soap *soap, _ns2__checkVat *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns2__checkVat(soap, tag ? tag : "ns2:checkVat", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__checkVat ** SOAP_FMAC4 soap_get_PointerTo_ns2__checkVat(struct soap *soap, _ns2__checkVat **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__checkVat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__matchCode(struct soap *soap, enum ns2__matchCode *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_ns2__matchCode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__matchCode(struct soap *soap, const char *tag, int id, enum ns2__matchCode *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__matchCode, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__matchCode(soap, tag, id, *a, type);
}

SOAP_FMAC3 enum ns2__matchCode ** SOAP_FMAC4 soap_in_PointerTons2__matchCode(struct soap *soap, const char *tag, enum ns2__matchCode **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (enum ns2__matchCode **)soap_malloc(soap, sizeof(enum ns2__matchCode *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__matchCode(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (enum ns2__matchCode **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__matchCode, sizeof(enum ns2__matchCode), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__matchCode(struct soap *soap, enum ns2__matchCode *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons2__matchCode(soap, tag ? tag : "ns2:matchCode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__matchCode ** SOAP_FMAC4 soap_get_PointerTons2__matchCode(struct soap *soap, enum ns2__matchCode **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__matchCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__companyTypeCode(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__companyTypeCode))
		soap_serialize_ns2__companyTypeCode(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__companyTypeCode(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__companyTypeCode, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns2__companyTypeCode(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__companyTypeCode(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns2__companyTypeCode(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__companyTypeCode, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__companyTypeCode(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons2__companyTypeCode(soap, tag ? tag : "ns2:companyTypeCode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__companyTypeCode(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__companyTypeCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
