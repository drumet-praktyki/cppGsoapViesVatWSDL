/* soapStub.h
   Generated by gSOAP 2.8.69 for checkVatService.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_ns2	"urn:ec.europa.eu:taxud:vies:services:checkVat:types"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20869
# error "GSOAP VERSION 20869 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* checkVatService.h:180 */
#ifndef SOAP_TYPE_ns2__matchCode
#define SOAP_TYPE_ns2__matchCode (15)
/* ns2:matchCode */
enum ns2__matchCode {
	ns2__matchCode__1 = 1,
	ns2__matchCode__2 = 2,
	ns2__matchCode__3 = 3
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class _ns2__checkVat;	/* checkVatService.h:152 */
class _ns2__checkVatResponse;	/* checkVatService.h:155 */
class _ns2__checkVatApprox;	/* checkVatService.h:158 */
class _ns2__checkVatApproxResponse;	/* checkVatService.h:161 */
struct __ns1__checkVat;	/* checkVatService.h:482 */
struct __ns1__checkVatApprox;	/* checkVatService.h:549 */

/* checkVatService.h:152 */
#ifndef SOAP_TYPE__ns2__checkVat
#define SOAP_TYPE__ns2__checkVat (10)
/* complex XSD type 'ns2:checkVat': */
class SOAP_CMAC _ns2__checkVat {
      public:
        /// Required element 'ns2:countryCode' of XSD type 'xsd:string'
        std::string countryCode;
        /// Required element 'ns2:vatNumber' of XSD type 'xsd:string'
        std::string vatNumber;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__checkVat
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__checkVat; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__checkVat, default initialized and not managed by a soap context
        virtual _ns2__checkVat *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__checkVat); }
      public:
        /// Constructor with initializations
        _ns2__checkVat() : countryCode(), vatNumber(), soap() { }
        virtual ~_ns2__checkVat() { }
        /// Friend allocator used by soap_new__ns2__checkVat(struct soap*, int)
        friend SOAP_FMAC1 _ns2__checkVat * SOAP_FMAC2 soap_instantiate__ns2__checkVat(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* checkVatService.h:155 */
#ifndef SOAP_TYPE__ns2__checkVatResponse
#define SOAP_TYPE__ns2__checkVatResponse (11)
/* complex XSD type 'ns2:checkVatResponse': */
class SOAP_CMAC _ns2__checkVatResponse {
      public:
        /// Required element 'ns2:countryCode' of XSD type 'xsd:string'
        std::string countryCode;
        /// Required element 'ns2:vatNumber' of XSD type 'xsd:string'
        std::string vatNumber;
        /// Required element 'ns2:requestDate' of XSD type 'xsd:date'
        std::string requestDate;
        /// Required element 'ns2:valid' of XSD type 'xsd:boolean'
        bool valid;
        /// Optional element 'ns2:name' of XSD type 'xsd:string'
        std::string *name;
        /// Optional element 'ns2:address' of XSD type 'xsd:string'
        std::string *address;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__checkVatResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__checkVatResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__checkVatResponse, default initialized and not managed by a soap context
        virtual _ns2__checkVatResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__checkVatResponse); }
      public:
        /// Constructor with initializations
        _ns2__checkVatResponse() : countryCode(), vatNumber(), requestDate(), valid(), name(), address(), soap() { }
        virtual ~_ns2__checkVatResponse() { }
        /// Friend allocator used by soap_new__ns2__checkVatResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns2__checkVatResponse * SOAP_FMAC2 soap_instantiate__ns2__checkVatResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* checkVatService.h:158 */
#ifndef SOAP_TYPE__ns2__checkVatApprox
#define SOAP_TYPE__ns2__checkVatApprox (12)
/* complex XSD type 'ns2:checkVatApprox': */
class SOAP_CMAC _ns2__checkVatApprox {
      public:
        /// Required element 'ns2:countryCode' of XSD type 'xsd:string'
        std::string countryCode;
        /// Required element 'ns2:vatNumber' of XSD type 'xsd:string'
        std::string vatNumber;
        /// Optional element 'ns2:traderName' of XSD type 'xsd:string'
        std::string *traderName;
        /// Optional element 'ns2:traderCompanyType' of XSD type 'ns2:companyTypeCode'
        std::string *traderCompanyType;
        /// Optional element 'ns2:traderStreet' of XSD type 'xsd:string'
        std::string *traderStreet;
        /// Optional element 'ns2:traderPostcode' of XSD type 'xsd:string'
        std::string *traderPostcode;
        /// Optional element 'ns2:traderCity' of XSD type 'xsd:string'
        std::string *traderCity;
        /// Optional element 'ns2:requesterCountryCode' of XSD type 'xsd:string'
        std::string *requesterCountryCode;
        /// Optional element 'ns2:requesterVatNumber' of XSD type 'xsd:string'
        std::string *requesterVatNumber;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__checkVatApprox
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__checkVatApprox; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__checkVatApprox, default initialized and not managed by a soap context
        virtual _ns2__checkVatApprox *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__checkVatApprox); }
      public:
        /// Constructor with initializations
        _ns2__checkVatApprox() : countryCode(), vatNumber(), traderName(), traderCompanyType(), traderStreet(), traderPostcode(), traderCity(), requesterCountryCode(), requesterVatNumber(), soap() { }
        virtual ~_ns2__checkVatApprox() { }
        /// Friend allocator used by soap_new__ns2__checkVatApprox(struct soap*, int)
        friend SOAP_FMAC1 _ns2__checkVatApprox * SOAP_FMAC2 soap_instantiate__ns2__checkVatApprox(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* checkVatService.h:161 */
#ifndef SOAP_TYPE__ns2__checkVatApproxResponse
#define SOAP_TYPE__ns2__checkVatApproxResponse (13)
/* complex XSD type 'ns2:checkVatApproxResponse': */
class SOAP_CMAC _ns2__checkVatApproxResponse {
      public:
        /// Required element 'ns2:countryCode' of XSD type 'xsd:string'
        std::string countryCode;
        /// Required element 'ns2:vatNumber' of XSD type 'xsd:string'
        std::string vatNumber;
        /// Required element 'ns2:requestDate' of XSD type 'xsd:date'
        std::string requestDate;
        /// Required element 'ns2:valid' of XSD type 'xsd:boolean'
        bool valid;
        /// Optional element 'ns2:traderName' of XSD type 'xsd:string'
        std::string *traderName;
        /// Optional element 'ns2:traderCompanyType' of XSD type 'ns2:companyTypeCode'
        std::string *traderCompanyType;
        /// Optional element 'ns2:traderAddress' of XSD type 'xsd:string'
        std::string *traderAddress;
        /// Optional element 'ns2:traderStreet' of XSD type 'xsd:string'
        std::string *traderStreet;
        /// Optional element 'ns2:traderPostcode' of XSD type 'xsd:string'
        std::string *traderPostcode;
        /// Optional element 'ns2:traderCity' of XSD type 'xsd:string'
        std::string *traderCity;
        /// Optional element 'ns2:traderNameMatch' of XSD type 'ns2:matchCode'
        enum ns2__matchCode *traderNameMatch;
        /// Optional element 'ns2:traderCompanyTypeMatch' of XSD type 'ns2:matchCode'
        enum ns2__matchCode *traderCompanyTypeMatch;
        /// Optional element 'ns2:traderStreetMatch' of XSD type 'ns2:matchCode'
        enum ns2__matchCode *traderStreetMatch;
        /// Optional element 'ns2:traderPostcodeMatch' of XSD type 'ns2:matchCode'
        enum ns2__matchCode *traderPostcodeMatch;
        /// Optional element 'ns2:traderCityMatch' of XSD type 'ns2:matchCode'
        enum ns2__matchCode *traderCityMatch;
        /// Required element 'ns2:requestIdentifier' of XSD type 'xsd:string'
        std::string requestIdentifier;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__checkVatApproxResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__checkVatApproxResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__checkVatApproxResponse, default initialized and not managed by a soap context
        virtual _ns2__checkVatApproxResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__checkVatApproxResponse); }
      public:
        /// Constructor with initializations
        _ns2__checkVatApproxResponse() : countryCode(), vatNumber(), requestDate(), valid(), traderName(), traderCompanyType(), traderAddress(), traderStreet(), traderPostcode(), traderCity(), traderNameMatch(), traderCompanyTypeMatch(), traderStreetMatch(), traderPostcodeMatch(), traderCityMatch(), requestIdentifier(), soap() { }
        virtual ~_ns2__checkVatApproxResponse() { }
        /// Friend allocator used by soap_new__ns2__checkVatApproxResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns2__checkVatApproxResponse * SOAP_FMAC2 soap_instantiate__ns2__checkVatApproxResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* checkVatService.h:482 */
#ifndef SOAP_TYPE___ns1__checkVat
#define SOAP_TYPE___ns1__checkVat (24)
/* Wrapper: */
struct SOAP_CMAC __ns1__checkVat {
      public:
        /** Optional element 'ns2:checkVat' of XSD type 'ns2:checkVat' */
        _ns2__checkVat *ns2__checkVat;
      public:
        /** Return unique type id SOAP_TYPE___ns1__checkVat */
        long soap_type() const { return SOAP_TYPE___ns1__checkVat; }
        /** Constructor with member initializations */
        __ns1__checkVat() : ns2__checkVat() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__checkVat * SOAP_FMAC2 soap_instantiate___ns1__checkVat(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* checkVatService.h:549 */
#ifndef SOAP_TYPE___ns1__checkVatApprox
#define SOAP_TYPE___ns1__checkVatApprox (28)
/* Wrapper: */
struct SOAP_CMAC __ns1__checkVatApprox {
      public:
        /** Optional element 'ns2:checkVatApprox' of XSD type 'ns2:checkVatApprox' */
        _ns2__checkVatApprox *ns2__checkVatApprox;
      public:
        /** Return unique type id SOAP_TYPE___ns1__checkVatApprox */
        long soap_type() const { return SOAP_TYPE___ns1__checkVatApprox; }
        /** Constructor with member initializations */
        __ns1__checkVatApprox() : ns2__checkVatApprox() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__checkVatApprox * SOAP_FMAC2 soap_instantiate___ns1__checkVatApprox(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* checkVatService.h:670 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (29)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* checkVatService.h:670 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (30)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* checkVatService.h:670 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (32)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* checkVatService.h:670 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (35)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* checkVatService.h:670 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (36)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* checkVatService.h:141 */
#ifndef SOAP_TYPE_xsd__date
#define SOAP_TYPE_xsd__date (9)
typedef std::string xsd__date;
#endif

/* checkVatService.h:174 */
#ifndef SOAP_TYPE_ns2__companyTypeCode
#define SOAP_TYPE_ns2__companyTypeCode (14)
typedef std::string ns2__companyTypeCode;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (17)
#endif

/* enum ns2__matchCode has binding name 'ns2__matchCode' for type 'ns2:matchCode' */
#ifndef SOAP_TYPE_ns2__matchCode
#define SOAP_TYPE_ns2__matchCode (15)
#endif

/* ns2__companyTypeCode has binding name 'ns2__companyTypeCode' for type 'ns2:companyTypeCode' */
#ifndef SOAP_TYPE_ns2__companyTypeCode
#define SOAP_TYPE_ns2__companyTypeCode (14)
#endif

/* _ns2__checkVatApproxResponse has binding name '_ns2__checkVatApproxResponse' for type '' */
#ifndef SOAP_TYPE__ns2__checkVatApproxResponse
#define SOAP_TYPE__ns2__checkVatApproxResponse (13)
#endif

/* _ns2__checkVatApprox has binding name '_ns2__checkVatApprox' for type '' */
#ifndef SOAP_TYPE__ns2__checkVatApprox
#define SOAP_TYPE__ns2__checkVatApprox (12)
#endif

/* _ns2__checkVatResponse has binding name '_ns2__checkVatResponse' for type '' */
#ifndef SOAP_TYPE__ns2__checkVatResponse
#define SOAP_TYPE__ns2__checkVatResponse (11)
#endif

/* _ns2__checkVat has binding name '_ns2__checkVat' for type '' */
#ifndef SOAP_TYPE__ns2__checkVat
#define SOAP_TYPE__ns2__checkVat (10)
#endif

/* xsd__date has binding name 'xsd__date' for type 'xsd:date' */
#ifndef SOAP_TYPE_xsd__date
#define SOAP_TYPE_xsd__date (9)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (8)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (36)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (35)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (32)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (30)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (29)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (38)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (37)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (31)
#endif

/* _ns2__checkVatApprox * has binding name 'PointerTo_ns2__checkVatApprox' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns2__checkVatApprox
#define SOAP_TYPE_PointerTo_ns2__checkVatApprox (25)
#endif

/* _ns2__checkVat * has binding name 'PointerTo_ns2__checkVat' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns2__checkVat
#define SOAP_TYPE_PointerTo_ns2__checkVat (21)
#endif

/* enum ns2__matchCode * has binding name 'PointerTons2__matchCode' for type 'ns2:matchCode' */
#ifndef SOAP_TYPE_PointerTons2__matchCode
#define SOAP_TYPE_PointerTons2__matchCode (20)
#endif

/* std::string * has binding name 'PointerTons2__companyTypeCode' for type 'ns2:companyTypeCode' */
#ifndef SOAP_TYPE_PointerTons2__companyTypeCode
#define SOAP_TYPE_PointerTons2__companyTypeCode (19)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (18)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stub Functions                                            *
 *                                                                            *
\******************************************************************************/

    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__checkVat(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__checkVat *ns2__checkVat, _ns2__checkVatResponse &ns2__checkVatResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__checkVatApprox(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns2__checkVatApprox *ns2__checkVatApprox, _ns2__checkVatApproxResponse &ns2__checkVatApproxResponse);

#endif

/* End of soapStub.h */
