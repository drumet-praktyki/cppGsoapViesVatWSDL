/* soapH.h
   Generated by gSOAP 2.8.69 for checkVatService.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__matchCode_DEFINED
#define SOAP_TYPE_ns2__matchCode_DEFINED

inline void soap_default_ns2__matchCode(struct soap *soap, enum ns2__matchCode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns2__matchCode
	*a = SOAP_DEFAULT_ns2__matchCode;
#else
	*a = (enum ns2__matchCode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__matchCode(struct soap*, const char*, int, const enum ns2__matchCode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__matchCode2s(struct soap*, enum ns2__matchCode);
SOAP_FMAC3 enum ns2__matchCode * SOAP_FMAC4 soap_in_ns2__matchCode(struct soap*, const char*, enum ns2__matchCode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__matchCode(struct soap*, const char*, enum ns2__matchCode *);

SOAP_FMAC3 enum ns2__matchCode * SOAP_FMAC4 soap_new_ns2__matchCode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__matchCode(struct soap*, const enum ns2__matchCode *, const char*, const char*);

inline int soap_write_ns2__matchCode(struct soap *soap, enum ns2__matchCode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns2__matchCode(soap, p, "ns2:matchCode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns2__matchCode(struct soap *soap, const char *URL, enum ns2__matchCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__matchCode(soap, p, "ns2:matchCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__matchCode(struct soap *soap, const char *URL, enum ns2__matchCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__matchCode(soap, p, "ns2:matchCode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns2__matchCode * SOAP_FMAC4 soap_get_ns2__matchCode(struct soap*, enum ns2__matchCode *, const char*, const char*);

inline int soap_read_ns2__matchCode(struct soap *soap, enum ns2__matchCode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns2__matchCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__matchCode(struct soap *soap, const char *URL, enum ns2__matchCode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__matchCode(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__matchCode(struct soap *soap, enum ns2__matchCode *p)
{
	if (::soap_read_ns2__matchCode(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__companyTypeCode_DEFINED
#define SOAP_TYPE_ns2__companyTypeCode_DEFINED

inline void soap_default_ns2__companyTypeCode(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__companyTypeCode(struct soap*, const std::string *);

#define soap_ns2__companyTypeCode2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__companyTypeCode(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns2__companyTypeCode(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[A-Z]{2}\\-[1-9][0-9]?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__companyTypeCode(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns2__companyTypeCode soap_instantiate_std__string


#define soap_new_ns2__companyTypeCode soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__companyTypeCode(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns2__companyTypeCode(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns2__companyTypeCode(soap, p, "ns2:companyTypeCode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns2__companyTypeCode(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__companyTypeCode(soap, p, "ns2:companyTypeCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__companyTypeCode(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns2__companyTypeCode(soap, p, "ns2:companyTypeCode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__companyTypeCode(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns2__companyTypeCode(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns2__companyTypeCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__companyTypeCode(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__companyTypeCode(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__companyTypeCode(struct soap *soap, std::string *p)
{
	if (::soap_read_ns2__companyTypeCode(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__checkVatApproxResponse_DEFINED
#define SOAP_TYPE__ns2__checkVatApproxResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__checkVatApproxResponse(struct soap*, const char*, int, const _ns2__checkVatApproxResponse *, const char*);
SOAP_FMAC3 _ns2__checkVatApproxResponse * SOAP_FMAC4 soap_in__ns2__checkVatApproxResponse(struct soap*, const char*, _ns2__checkVatApproxResponse *, const char*);
SOAP_FMAC1 _ns2__checkVatApproxResponse * SOAP_FMAC2 soap_instantiate__ns2__checkVatApproxResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__checkVatApproxResponse * soap_new__ns2__checkVatApproxResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__checkVatApproxResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__checkVatApproxResponse * soap_new_req__ns2__checkVatApproxResponse(
	struct soap *soap,
	const std::string& countryCode,
	const std::string& vatNumber,
	const std::string& requestDate,
	bool valid,
	const std::string& requestIdentifier)
{
	_ns2__checkVatApproxResponse *_p = ::soap_new__ns2__checkVatApproxResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__checkVatApproxResponse::countryCode = countryCode;
		_p->_ns2__checkVatApproxResponse::vatNumber = vatNumber;
		_p->_ns2__checkVatApproxResponse::requestDate = requestDate;
		_p->_ns2__checkVatApproxResponse::valid = valid;
		_p->_ns2__checkVatApproxResponse::requestIdentifier = requestIdentifier;
	}
	return _p;
}

inline _ns2__checkVatApproxResponse * soap_new_set__ns2__checkVatApproxResponse(
	struct soap *soap,
	const std::string& countryCode,
	const std::string& vatNumber,
	const std::string& requestDate,
	bool valid,
	std::string *traderName,
	std::string *traderCompanyType,
	std::string *traderAddress,
	std::string *traderStreet,
	std::string *traderPostcode,
	std::string *traderCity,
	enum ns2__matchCode *traderNameMatch,
	enum ns2__matchCode *traderCompanyTypeMatch,
	enum ns2__matchCode *traderStreetMatch,
	enum ns2__matchCode *traderPostcodeMatch,
	enum ns2__matchCode *traderCityMatch,
	const std::string& requestIdentifier)
{
	_ns2__checkVatApproxResponse *_p = ::soap_new__ns2__checkVatApproxResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__checkVatApproxResponse::countryCode = countryCode;
		_p->_ns2__checkVatApproxResponse::vatNumber = vatNumber;
		_p->_ns2__checkVatApproxResponse::requestDate = requestDate;
		_p->_ns2__checkVatApproxResponse::valid = valid;
		_p->_ns2__checkVatApproxResponse::traderName = traderName;
		_p->_ns2__checkVatApproxResponse::traderCompanyType = traderCompanyType;
		_p->_ns2__checkVatApproxResponse::traderAddress = traderAddress;
		_p->_ns2__checkVatApproxResponse::traderStreet = traderStreet;
		_p->_ns2__checkVatApproxResponse::traderPostcode = traderPostcode;
		_p->_ns2__checkVatApproxResponse::traderCity = traderCity;
		_p->_ns2__checkVatApproxResponse::traderNameMatch = traderNameMatch;
		_p->_ns2__checkVatApproxResponse::traderCompanyTypeMatch = traderCompanyTypeMatch;
		_p->_ns2__checkVatApproxResponse::traderStreetMatch = traderStreetMatch;
		_p->_ns2__checkVatApproxResponse::traderPostcodeMatch = traderPostcodeMatch;
		_p->_ns2__checkVatApproxResponse::traderCityMatch = traderCityMatch;
		_p->_ns2__checkVatApproxResponse::requestIdentifier = requestIdentifier;
	}
	return _p;
}

inline int soap_write__ns2__checkVatApproxResponse(struct soap *soap, _ns2__checkVatApproxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:checkVatApproxResponse", p->soap_type() == SOAP_TYPE__ns2__checkVatApproxResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__checkVatApproxResponse(struct soap *soap, const char *URL, _ns2__checkVatApproxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:checkVatApproxResponse", p->soap_type() == SOAP_TYPE__ns2__checkVatApproxResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__checkVatApproxResponse(struct soap *soap, const char *URL, _ns2__checkVatApproxResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:checkVatApproxResponse", p->soap_type() == SOAP_TYPE__ns2__checkVatApproxResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__checkVatApproxResponse * SOAP_FMAC4 soap_get__ns2__checkVatApproxResponse(struct soap*, _ns2__checkVatApproxResponse *, const char*, const char*);

inline int soap_read__ns2__checkVatApproxResponse(struct soap *soap, _ns2__checkVatApproxResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__checkVatApproxResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__checkVatApproxResponse(struct soap *soap, const char *URL, _ns2__checkVatApproxResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__checkVatApproxResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__checkVatApproxResponse(struct soap *soap, _ns2__checkVatApproxResponse *p)
{
	if (::soap_read__ns2__checkVatApproxResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__checkVatApprox_DEFINED
#define SOAP_TYPE__ns2__checkVatApprox_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__checkVatApprox(struct soap*, const char*, int, const _ns2__checkVatApprox *, const char*);
SOAP_FMAC3 _ns2__checkVatApprox * SOAP_FMAC4 soap_in__ns2__checkVatApprox(struct soap*, const char*, _ns2__checkVatApprox *, const char*);
SOAP_FMAC1 _ns2__checkVatApprox * SOAP_FMAC2 soap_instantiate__ns2__checkVatApprox(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__checkVatApprox * soap_new__ns2__checkVatApprox(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__checkVatApprox(soap, n, NULL, NULL, NULL);
}

inline _ns2__checkVatApprox * soap_new_req__ns2__checkVatApprox(
	struct soap *soap,
	const std::string& countryCode,
	const std::string& vatNumber)
{
	_ns2__checkVatApprox *_p = ::soap_new__ns2__checkVatApprox(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__checkVatApprox::countryCode = countryCode;
		_p->_ns2__checkVatApprox::vatNumber = vatNumber;
	}
	return _p;
}

inline _ns2__checkVatApprox * soap_new_set__ns2__checkVatApprox(
	struct soap *soap,
	const std::string& countryCode,
	const std::string& vatNumber,
	std::string *traderName,
	std::string *traderCompanyType,
	std::string *traderStreet,
	std::string *traderPostcode,
	std::string *traderCity,
	std::string *requesterCountryCode,
	std::string *requesterVatNumber)
{
	_ns2__checkVatApprox *_p = ::soap_new__ns2__checkVatApprox(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__checkVatApprox::countryCode = countryCode;
		_p->_ns2__checkVatApprox::vatNumber = vatNumber;
		_p->_ns2__checkVatApprox::traderName = traderName;
		_p->_ns2__checkVatApprox::traderCompanyType = traderCompanyType;
		_p->_ns2__checkVatApprox::traderStreet = traderStreet;
		_p->_ns2__checkVatApprox::traderPostcode = traderPostcode;
		_p->_ns2__checkVatApprox::traderCity = traderCity;
		_p->_ns2__checkVatApprox::requesterCountryCode = requesterCountryCode;
		_p->_ns2__checkVatApprox::requesterVatNumber = requesterVatNumber;
	}
	return _p;
}

inline int soap_write__ns2__checkVatApprox(struct soap *soap, _ns2__checkVatApprox const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:checkVatApprox", p->soap_type() == SOAP_TYPE__ns2__checkVatApprox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__checkVatApprox(struct soap *soap, const char *URL, _ns2__checkVatApprox const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:checkVatApprox", p->soap_type() == SOAP_TYPE__ns2__checkVatApprox ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__checkVatApprox(struct soap *soap, const char *URL, _ns2__checkVatApprox const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:checkVatApprox", p->soap_type() == SOAP_TYPE__ns2__checkVatApprox ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__checkVatApprox * SOAP_FMAC4 soap_get__ns2__checkVatApprox(struct soap*, _ns2__checkVatApprox *, const char*, const char*);

inline int soap_read__ns2__checkVatApprox(struct soap *soap, _ns2__checkVatApprox *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__checkVatApprox(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__checkVatApprox(struct soap *soap, const char *URL, _ns2__checkVatApprox *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__checkVatApprox(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__checkVatApprox(struct soap *soap, _ns2__checkVatApprox *p)
{
	if (::soap_read__ns2__checkVatApprox(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__checkVatResponse_DEFINED
#define SOAP_TYPE__ns2__checkVatResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__checkVatResponse(struct soap*, const char*, int, const _ns2__checkVatResponse *, const char*);
SOAP_FMAC3 _ns2__checkVatResponse * SOAP_FMAC4 soap_in__ns2__checkVatResponse(struct soap*, const char*, _ns2__checkVatResponse *, const char*);
SOAP_FMAC1 _ns2__checkVatResponse * SOAP_FMAC2 soap_instantiate__ns2__checkVatResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__checkVatResponse * soap_new__ns2__checkVatResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__checkVatResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__checkVatResponse * soap_new_req__ns2__checkVatResponse(
	struct soap *soap,
	const std::string& countryCode,
	const std::string& vatNumber,
	const std::string& requestDate,
	bool valid)
{
	_ns2__checkVatResponse *_p = ::soap_new__ns2__checkVatResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__checkVatResponse::countryCode = countryCode;
		_p->_ns2__checkVatResponse::vatNumber = vatNumber;
		_p->_ns2__checkVatResponse::requestDate = requestDate;
		_p->_ns2__checkVatResponse::valid = valid;
	}
	return _p;
}

inline _ns2__checkVatResponse * soap_new_set__ns2__checkVatResponse(
	struct soap *soap,
	const std::string& countryCode,
	const std::string& vatNumber,
	const std::string& requestDate,
	bool valid,
	std::string *name,
	std::string *address)
{
	_ns2__checkVatResponse *_p = ::soap_new__ns2__checkVatResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__checkVatResponse::countryCode = countryCode;
		_p->_ns2__checkVatResponse::vatNumber = vatNumber;
		_p->_ns2__checkVatResponse::requestDate = requestDate;
		_p->_ns2__checkVatResponse::valid = valid;
		_p->_ns2__checkVatResponse::name = name;
		_p->_ns2__checkVatResponse::address = address;
	}
	return _p;
}

inline int soap_write__ns2__checkVatResponse(struct soap *soap, _ns2__checkVatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:checkVatResponse", p->soap_type() == SOAP_TYPE__ns2__checkVatResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__checkVatResponse(struct soap *soap, const char *URL, _ns2__checkVatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:checkVatResponse", p->soap_type() == SOAP_TYPE__ns2__checkVatResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__checkVatResponse(struct soap *soap, const char *URL, _ns2__checkVatResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:checkVatResponse", p->soap_type() == SOAP_TYPE__ns2__checkVatResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__checkVatResponse * SOAP_FMAC4 soap_get__ns2__checkVatResponse(struct soap*, _ns2__checkVatResponse *, const char*, const char*);

inline int soap_read__ns2__checkVatResponse(struct soap *soap, _ns2__checkVatResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__checkVatResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__checkVatResponse(struct soap *soap, const char *URL, _ns2__checkVatResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__checkVatResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__checkVatResponse(struct soap *soap, _ns2__checkVatResponse *p)
{
	if (::soap_read__ns2__checkVatResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__checkVat_DEFINED
#define SOAP_TYPE__ns2__checkVat_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__checkVat(struct soap*, const char*, int, const _ns2__checkVat *, const char*);
SOAP_FMAC3 _ns2__checkVat * SOAP_FMAC4 soap_in__ns2__checkVat(struct soap*, const char*, _ns2__checkVat *, const char*);
SOAP_FMAC1 _ns2__checkVat * SOAP_FMAC2 soap_instantiate__ns2__checkVat(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__checkVat * soap_new__ns2__checkVat(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__checkVat(soap, n, NULL, NULL, NULL);
}

inline _ns2__checkVat * soap_new_req__ns2__checkVat(
	struct soap *soap,
	const std::string& countryCode,
	const std::string& vatNumber)
{
	_ns2__checkVat *_p = ::soap_new__ns2__checkVat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__checkVat::countryCode = countryCode;
		_p->_ns2__checkVat::vatNumber = vatNumber;
	}
	return _p;
}

inline _ns2__checkVat * soap_new_set__ns2__checkVat(
	struct soap *soap,
	const std::string& countryCode,
	const std::string& vatNumber)
{
	_ns2__checkVat *_p = ::soap_new__ns2__checkVat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__checkVat::countryCode = countryCode;
		_p->_ns2__checkVat::vatNumber = vatNumber;
	}
	return _p;
}

inline int soap_write__ns2__checkVat(struct soap *soap, _ns2__checkVat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:checkVat", p->soap_type() == SOAP_TYPE__ns2__checkVat ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__checkVat(struct soap *soap, const char *URL, _ns2__checkVat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:checkVat", p->soap_type() == SOAP_TYPE__ns2__checkVat ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__checkVat(struct soap *soap, const char *URL, _ns2__checkVat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:checkVat", p->soap_type() == SOAP_TYPE__ns2__checkVat ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__checkVat * SOAP_FMAC4 soap_get__ns2__checkVat(struct soap*, _ns2__checkVat *, const char*, const char*);

inline int soap_read__ns2__checkVat(struct soap *soap, _ns2__checkVat *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__checkVat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__checkVat(struct soap *soap, const char *URL, _ns2__checkVat *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__checkVat(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__checkVat(struct soap *soap, _ns2__checkVat *p)
{
	if (::soap_read__ns2__checkVat(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__date_DEFINED
#define SOAP_TYPE_xsd__date_DEFINED

inline void soap_default_xsd__date(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__date(struct soap*, const std::string *);

#define soap_xsd__date2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__date(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d{4,}-\\d{2}-\\d{2}(Z|[-+]\\d{2}:\\d{2})?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__date(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__date soap_instantiate_std__string


#define soap_new_xsd__date soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__date(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__date(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__date(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__date(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__date(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__date(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__date(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__date(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__date(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__date(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__date(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__checkVatApprox_DEFINED
#define SOAP_TYPE___ns1__checkVatApprox_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkVatApprox(struct soap*, struct __ns1__checkVatApprox *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkVatApprox(struct soap*, const struct __ns1__checkVatApprox *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkVatApprox(struct soap*, const char*, int, const struct __ns1__checkVatApprox *, const char*);
SOAP_FMAC3 struct __ns1__checkVatApprox * SOAP_FMAC4 soap_in___ns1__checkVatApprox(struct soap*, const char*, struct __ns1__checkVatApprox *, const char*);
SOAP_FMAC1 struct __ns1__checkVatApprox * SOAP_FMAC2 soap_instantiate___ns1__checkVatApprox(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkVatApprox * soap_new___ns1__checkVatApprox(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkVatApprox(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkVatApprox * soap_new_req___ns1__checkVatApprox(
	struct soap *soap)
{
	struct __ns1__checkVatApprox *_p = ::soap_new___ns1__checkVatApprox(soap);
	if (_p)
	{	::soap_default___ns1__checkVatApprox(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkVatApprox * soap_new_set___ns1__checkVatApprox(
	struct soap *soap,
	_ns2__checkVatApprox *ns2__checkVatApprox)
{
	struct __ns1__checkVatApprox *_p = ::soap_new___ns1__checkVatApprox(soap);
	if (_p)
	{	::soap_default___ns1__checkVatApprox(soap, _p);
		_p->ns2__checkVatApprox = ns2__checkVatApprox;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkVatApprox(struct soap*, const struct __ns1__checkVatApprox *, const char*, const char*);

inline int soap_write___ns1__checkVatApprox(struct soap *soap, struct __ns1__checkVatApprox const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__checkVatApprox(soap, p), 0) || ::soap_put___ns1__checkVatApprox(soap, p, "-ns1:checkVatApprox", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__checkVatApprox(struct soap *soap, const char *URL, struct __ns1__checkVatApprox const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__checkVatApprox(soap, p), 0) || ::soap_put___ns1__checkVatApprox(soap, p, "-ns1:checkVatApprox", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__checkVatApprox(struct soap *soap, const char *URL, struct __ns1__checkVatApprox const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__checkVatApprox(soap, p), 0) || ::soap_put___ns1__checkVatApprox(soap, p, "-ns1:checkVatApprox", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkVatApprox * SOAP_FMAC4 soap_get___ns1__checkVatApprox(struct soap*, struct __ns1__checkVatApprox *, const char*, const char*);

inline int soap_read___ns1__checkVatApprox(struct soap *soap, struct __ns1__checkVatApprox *p)
{
	if (p)
	{	::soap_default___ns1__checkVatApprox(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__checkVatApprox(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__checkVatApprox(struct soap *soap, const char *URL, struct __ns1__checkVatApprox *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__checkVatApprox(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__checkVatApprox(struct soap *soap, struct __ns1__checkVatApprox *p)
{
	if (::soap_read___ns1__checkVatApprox(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkVat_DEFINED
#define SOAP_TYPE___ns1__checkVat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkVat(struct soap*, struct __ns1__checkVat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkVat(struct soap*, const struct __ns1__checkVat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkVat(struct soap*, const char*, int, const struct __ns1__checkVat *, const char*);
SOAP_FMAC3 struct __ns1__checkVat * SOAP_FMAC4 soap_in___ns1__checkVat(struct soap*, const char*, struct __ns1__checkVat *, const char*);
SOAP_FMAC1 struct __ns1__checkVat * SOAP_FMAC2 soap_instantiate___ns1__checkVat(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkVat * soap_new___ns1__checkVat(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkVat(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkVat * soap_new_req___ns1__checkVat(
	struct soap *soap)
{
	struct __ns1__checkVat *_p = ::soap_new___ns1__checkVat(soap);
	if (_p)
	{	::soap_default___ns1__checkVat(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkVat * soap_new_set___ns1__checkVat(
	struct soap *soap,
	_ns2__checkVat *ns2__checkVat)
{
	struct __ns1__checkVat *_p = ::soap_new___ns1__checkVat(soap);
	if (_p)
	{	::soap_default___ns1__checkVat(soap, _p);
		_p->ns2__checkVat = ns2__checkVat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkVat(struct soap*, const struct __ns1__checkVat *, const char*, const char*);

inline int soap_write___ns1__checkVat(struct soap *soap, struct __ns1__checkVat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__checkVat(soap, p), 0) || ::soap_put___ns1__checkVat(soap, p, "-ns1:checkVat", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__checkVat(struct soap *soap, const char *URL, struct __ns1__checkVat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__checkVat(soap, p), 0) || ::soap_put___ns1__checkVat(soap, p, "-ns1:checkVat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__checkVat(struct soap *soap, const char *URL, struct __ns1__checkVat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__checkVat(soap, p), 0) || ::soap_put___ns1__checkVat(soap, p, "-ns1:checkVat", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkVat * SOAP_FMAC4 soap_get___ns1__checkVat(struct soap*, struct __ns1__checkVat *, const char*, const char*);

inline int soap_read___ns1__checkVat(struct soap *soap, struct __ns1__checkVat *p)
{
	if (p)
	{	::soap_default___ns1__checkVat(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__checkVat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__checkVat(struct soap *soap, const char *URL, struct __ns1__checkVat *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__checkVat(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__checkVat(struct soap *soap, struct __ns1__checkVat *p)
{
	if (::soap_read___ns1__checkVat(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns2__checkVatApprox_DEFINED
#define SOAP_TYPE_PointerTo_ns2__checkVatApprox_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__checkVatApprox(struct soap*, _ns2__checkVatApprox *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__checkVatApprox(struct soap*, const char *, int, _ns2__checkVatApprox *const*, const char *);
SOAP_FMAC3 _ns2__checkVatApprox ** SOAP_FMAC4 soap_in_PointerTo_ns2__checkVatApprox(struct soap*, const char*, _ns2__checkVatApprox **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__checkVatApprox(struct soap*, _ns2__checkVatApprox *const*, const char*, const char*);
SOAP_FMAC3 _ns2__checkVatApprox ** SOAP_FMAC4 soap_get_PointerTo_ns2__checkVatApprox(struct soap*, _ns2__checkVatApprox **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__checkVat_DEFINED
#define SOAP_TYPE_PointerTo_ns2__checkVat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__checkVat(struct soap*, _ns2__checkVat *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__checkVat(struct soap*, const char *, int, _ns2__checkVat *const*, const char *);
SOAP_FMAC3 _ns2__checkVat ** SOAP_FMAC4 soap_in_PointerTo_ns2__checkVat(struct soap*, const char*, _ns2__checkVat **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__checkVat(struct soap*, _ns2__checkVat *const*, const char*, const char*);
SOAP_FMAC3 _ns2__checkVat ** SOAP_FMAC4 soap_get_PointerTo_ns2__checkVat(struct soap*, _ns2__checkVat **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__matchCode_DEFINED
#define SOAP_TYPE_PointerTons2__matchCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__matchCode(struct soap*, enum ns2__matchCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__matchCode(struct soap*, const char *, int, enum ns2__matchCode *const*, const char *);
SOAP_FMAC3 enum ns2__matchCode ** SOAP_FMAC4 soap_in_PointerTons2__matchCode(struct soap*, const char*, enum ns2__matchCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__matchCode(struct soap*, enum ns2__matchCode *const*, const char*, const char*);
SOAP_FMAC3 enum ns2__matchCode ** SOAP_FMAC4 soap_get_PointerTons2__matchCode(struct soap*, enum ns2__matchCode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__companyTypeCode_DEFINED
#define SOAP_TYPE_PointerTons2__companyTypeCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__companyTypeCode(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__companyTypeCode(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons2__companyTypeCode(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__companyTypeCode(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons2__companyTypeCode(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
